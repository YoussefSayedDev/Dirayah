generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  password      String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Profile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  role                String?
  firstName           String?
  lastName            String?
  onboardingCompleted Boolean  @default(false)
  onboardingStep      Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Role-specific relations
  studentProfile StudentProfile?
  teacherProfile TeacherProfile?
  parentProfile  ParentProfile?
}

model StudentProfile {
  id             String    @id @default(cuid())
  profileId      String    @unique
  interests      String[]
  grade          String?
  school         String?
  educationLevel String?
  courses        String[]
  courseCode     String?
  dateOfBirth    DateTime?
  profile        Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

model TeacherProfile {
  id          String  @id @default(cuid())
  profileId   String  @unique
  institution String?
  experience  String?
  expertise   String?
  bio         String? @db.Text
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("teacher_profiles")
}

model ParentProfile {
  id          String  @id @default(cuid())
  profileId   String  @unique
  parentName  String?
  parentPhone String?
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("parent_profiles")
}
